A linked list is said to contain a cycle if any node is visited more than once while traversing the list.

Complete the function provided for you in your editor. It has one parameter: a pointer to a Node object named  that points to the head of a linked list. Your function must return a boolean denoting whether or not there is a cycle in the list. If there is a cycle, return true; otherwise, return false.

Note: If the list is empty,  will be null.

Input Format

Our hidden code checker passes the appropriate argument to your function. You are not responsible for reading any input from stdin.

Constraints

Output Format

If the list contains a cycle, your function must return true. If the list does not contain a cycle, it must return false. The binary integer corresponding to the boolean value returned by your function is printed to stdout by our hidden code checker.



======================================================================================

Solution 1: Using Runner technique (For inplace cycle detection ):

static boolean hasCycle(SinglyLinkedListNode head) {
        if(head==null) return false;
        SinglyLinkedListNode i=head,j=head;
        while(j!=null && j.next!=null){
            i = i.next;
            j=j.next.next;
            if (j == i) return true;
        }
        return false;
    }


Solution 2: Using HashSet (When you don't have space limitation):

static boolean hasCycle(SinglyLinkedListNode head) {
        if(head==null) return false;
        Set<SinglyLinkedListNode> set=new HashSet<>();
        SinglyLinkedListNode temp=head;
        while(temp.next!=null){
            if(set.contains(temp)) return true;
            else set.add(temp);
            temp=temp.next;
        }
        return false;
    }
